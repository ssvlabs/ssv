// Code generated by MockGen. DO NOT EDIT.
// Source: ./ssv.go
//
// Generated by this command:
//
//	mockgen -package=networkconfig -destination=./ssv_mock.go -source=./ssv.go
//

// Package networkconfig is a generated GoMock package.
package networkconfig

import (
	reflect "reflect"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	types "github.com/ssvlabs/ssv-spec/types"
	gomock "go.uber.org/mock/gomock"
)

// MockSSV is a mock of SSV interface.
type MockSSV struct {
	ctrl     *gomock.Controller
	recorder *MockSSVMockRecorder
	isgomock struct{}
}

// MockSSVMockRecorder is the mock recorder for MockSSV.
type MockSSVMockRecorder struct {
	mock *MockSSV
}

// NewMockSSV creates a new mock instance.
func NewMockSSV(ctrl *gomock.Controller) *MockSSV {
	mock := &MockSSV{ctrl: ctrl}
	mock.recorder = &MockSSVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSV) EXPECT() *MockSSVMockRecorder {
	return m.recorder
}

// GetDomainType mocks base method.
func (m *MockSSV) GetDomainType() types.DomainType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainType")
	ret0, _ := ret[0].(types.DomainType)
	return ret0
}

// GetDomainType indicates an expected call of GetDomainType.
func (mr *MockSSVMockRecorder) GetDomainType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainType", reflect.TypeOf((*MockSSV)(nil).GetDomainType))
}

// GetGasLimit36Epoch mocks base method.
func (m *MockSSV) GetGasLimit36Epoch() phase0.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasLimit36Epoch")
	ret0, _ := ret[0].(phase0.Epoch)
	return ret0
}

// GetGasLimit36Epoch indicates an expected call of GetGasLimit36Epoch.
func (mr *MockSSVMockRecorder) GetGasLimit36Epoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasLimit36Epoch", reflect.TypeOf((*MockSSV)(nil).GetGasLimit36Epoch))
}
