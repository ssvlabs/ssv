// Code generated by MockGen. DO NOT EDIT.
// Source: ./syncer.go

// Package metadata is a generated GoMock package.
package metadata

import (
	"context"
	"reflect"

	"github.com/ssvlabs/ssv-spec/types"
	"go.uber.org/mock/gomock"

	"github.com/ssvlabs/ssv/protocol/v2/blockchain/beacon"
	types0 "github.com/ssvlabs/ssv/protocol/v2/types"
	"github.com/ssvlabs/ssv/registry/storage"
	"github.com/ssvlabs/ssv/storage/basedb"
)

// MockshareStorage is a mock of shareStorage interface.
type MockshareStorage struct {
	ctrl     *gomock.Controller
	recorder *MockshareStorageMockRecorder
}

// MockshareStorageMockRecorder is the mock recorder for MockshareStorage.
type MockshareStorageMockRecorder struct {
	mock *MockshareStorage
}

// NewMockshareStorage creates a new mock instance.
func NewMockshareStorage(ctrl *gomock.Controller) *MockshareStorage {
	mock := &MockshareStorage{ctrl: ctrl}
	mock.recorder = &MockshareStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshareStorage) EXPECT() *MockshareStorageMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockshareStorage) List(txn basedb.Reader, filters ...storage.SharesFilter) []*types0.SSVShare {
	m.ctrl.T.Helper()
	varargs := []interface{}{txn}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockshareStorageMockRecorder) List(txn interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{txn}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockshareStorage)(nil).List), varargs...)
}

// Range mocks base method.
func (m *MockshareStorage) Range(txn basedb.Reader, fn func(*types0.SSVShare) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", txn, fn)
}

// Range indicates an expected call of Range.
func (mr *MockshareStorageMockRecorder) Range(txn, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockshareStorage)(nil).Range), txn, fn)
}

// UpdateValidatorsMetadata mocks base method.
func (m *MockshareStorage) UpdateValidatorsMetadata(arg0 map[types.ValidatorPK]*beacon.ValidatorMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValidatorsMetadata", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValidatorsMetadata indicates an expected call of UpdateValidatorsMetadata.
func (mr *MockshareStorageMockRecorder) UpdateValidatorsMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidatorsMetadata", reflect.TypeOf((*MockshareStorage)(nil).UpdateValidatorsMetadata), arg0)
}

// Mockfetcher is a mock of fetcher interface.
type Mockfetcher struct {
	ctrl     *gomock.Controller
	recorder *MockfetcherMockRecorder
}

// MockfetcherMockRecorder is the mock recorder for Mockfetcher.
type MockfetcherMockRecorder struct {
	mock *Mockfetcher
}

// NewMockfetcher creates a new mock instance.
func NewMockfetcher(ctrl *gomock.Controller) *Mockfetcher {
	mock := &Mockfetcher{ctrl: ctrl}
	mock.recorder = &MockfetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockfetcher) EXPECT() *MockfetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *Mockfetcher) Fetch(ctx context.Context, pubKeys []types.ValidatorPK) (Validators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, pubKeys)
	ret0, _ := ret[0].(Validators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockfetcherMockRecorder) Fetch(ctx, pubKeys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*Mockfetcher)(nil).Fetch), ctx, pubKeys)
}
