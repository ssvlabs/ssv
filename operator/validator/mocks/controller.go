// Code generated by MockGen. DO NOT EDIT.
// Source: ./controller.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/controller.go -source=./controller.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/ssvlabs/ssv-spec/types"
	network "github.com/ssvlabs/ssv/network"
	commons "github.com/ssvlabs/ssv/network/commons"
	types0 "github.com/ssvlabs/ssv/protocol/v2/types"
	storage "github.com/ssvlabs/ssv/registry/storage"
	basedb "github.com/ssvlabs/ssv/storage/basedb"
	gomock "go.uber.org/mock/gomock"
)

// MockSharesStorage is a mock of SharesStorage interface.
type MockSharesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSharesStorageMockRecorder
	isgomock struct{}
}

// MockSharesStorageMockRecorder is the mock recorder for MockSharesStorage.
type MockSharesStorageMockRecorder struct {
	mock *MockSharesStorage
}

// NewMockSharesStorage creates a new mock instance.
func NewMockSharesStorage(ctrl *gomock.Controller) *MockSharesStorage {
	mock := &MockSharesStorage{ctrl: ctrl}
	mock.recorder = &MockSharesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharesStorage) EXPECT() *MockSharesStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSharesStorage) Get(txn basedb.Reader, pubKey []byte) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", txn, pubKey)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSharesStorageMockRecorder) Get(txn, pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSharesStorage)(nil).Get), txn, pubKey)
}

// List mocks base method.
func (m *MockSharesStorage) List(txn basedb.Reader, filters ...storage.SharesFilter) []*types0.SSVShare {
	m.ctrl.T.Helper()
	varargs := []any{txn}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockSharesStorageMockRecorder) List(txn any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{txn}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSharesStorage)(nil).List), varargs...)
}

// Range mocks base method.
func (m *MockSharesStorage) Range(txn basedb.Reader, fn func(*types0.SSVShare) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", txn, fn)
}

// Range indicates an expected call of Range.
func (mr *MockSharesStorageMockRecorder) Range(txn, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockSharesStorage)(nil).Range), txn, fn)
}

// MockP2PNetwork is a mock of P2PNetwork interface.
type MockP2PNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockP2PNetworkMockRecorder
	isgomock struct{}
}

// MockP2PNetworkMockRecorder is the mock recorder for MockP2PNetwork.
type MockP2PNetworkMockRecorder struct {
	mock *MockP2PNetwork
}

// NewMockP2PNetwork creates a new mock instance.
func NewMockP2PNetwork(ctrl *gomock.Controller) *MockP2PNetwork {
	mock := &MockP2PNetwork{ctrl: ctrl}
	mock.recorder = &MockP2PNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PNetwork) EXPECT() *MockP2PNetworkMockRecorder {
	return m.recorder
}

// ActiveSubnets mocks base method.
func (m *MockP2PNetwork) ActiveSubnets() commons.Subnets {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveSubnets")
	ret0, _ := ret[0].(commons.Subnets)
	return ret0
}

// ActiveSubnets indicates an expected call of ActiveSubnets.
func (mr *MockP2PNetworkMockRecorder) ActiveSubnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveSubnets", reflect.TypeOf((*MockP2PNetwork)(nil).ActiveSubnets))
}

// Broadcast mocks base method.
func (m *MockP2PNetwork) Broadcast(id types.MessageID, message *types.SignedSSVMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", id, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockP2PNetworkMockRecorder) Broadcast(id, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockP2PNetwork)(nil).Broadcast), id, message)
}

// FixedSubnets mocks base method.
func (m *MockP2PNetwork) FixedSubnets() commons.Subnets {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FixedSubnets")
	ret0, _ := ret[0].(commons.Subnets)
	return ret0
}

// FixedSubnets indicates an expected call of FixedSubnets.
func (mr *MockP2PNetworkMockRecorder) FixedSubnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FixedSubnets", reflect.TypeOf((*MockP2PNetwork)(nil).FixedSubnets))
}

// SubscribeRandoms mocks base method.
func (m *MockP2PNetwork) SubscribeRandoms(numSubnets int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeRandoms", numSubnets)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeRandoms indicates an expected call of SubscribeRandoms.
func (mr *MockP2PNetworkMockRecorder) SubscribeRandoms(numSubnets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeRandoms", reflect.TypeOf((*MockP2PNetwork)(nil).SubscribeRandoms), numSubnets)
}

// UseMessageRouter mocks base method.
func (m *MockP2PNetwork) UseMessageRouter(router network.MessageRouter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMessageRouter", router)
}

// UseMessageRouter indicates an expected call of UseMessageRouter.
func (mr *MockP2PNetworkMockRecorder) UseMessageRouter(router any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMessageRouter", reflect.TypeOf((*MockP2PNetwork)(nil).UseMessageRouter), router)
}
