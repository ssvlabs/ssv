// Code generated by MockGen. DO NOT EDIT.
// Source: ./controller.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/controller.go -source=./controller.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ssvlabs/ssv-spec/types"
	network "github.com/ssvlabs/ssv/network"
	commons "github.com/ssvlabs/ssv/network/commons"
	duties "github.com/ssvlabs/ssv/operator/duties"
	validator "github.com/ssvlabs/ssv/protocol/v2/ssv/validator"
	types0 "github.com/ssvlabs/ssv/protocol/v2/types"
	storage "github.com/ssvlabs/ssv/registry/storage"
	basedb "github.com/ssvlabs/ssv/storage/basedb"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
	isgomock struct{}
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// ExecuteCommitteeDuty mocks base method.
func (m *MockController) ExecuteCommitteeDuty(ctx context.Context, logger *zap.Logger, committeeID types.CommitteeID, duty *types.CommitteeDuty) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteCommitteeDuty", ctx, logger, committeeID, duty)
}

// ExecuteCommitteeDuty indicates an expected call of ExecuteCommitteeDuty.
func (mr *MockControllerMockRecorder) ExecuteCommitteeDuty(ctx, logger, committeeID, duty any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommitteeDuty", reflect.TypeOf((*MockController)(nil).ExecuteCommitteeDuty), ctx, logger, committeeID, duty)
}

// ExecuteDuty mocks base method.
func (m *MockController) ExecuteDuty(ctx context.Context, logger *zap.Logger, duty *types.ValidatorDuty) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteDuty", ctx, logger, duty)
}

// ExecuteDuty indicates an expected call of ExecuteDuty.
func (mr *MockControllerMockRecorder) ExecuteDuty(ctx, logger, duty any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteDuty", reflect.TypeOf((*MockController)(nil).ExecuteDuty), ctx, logger, duty)
}

// ExitValidator mocks base method.
func (m *MockController) ExitValidator(pubKey phase0.BLSPubKey, blockNumber uint64, validatorIndex phase0.ValidatorIndex, ownValidator bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitValidator", pubKey, blockNumber, validatorIndex, ownValidator)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExitValidator indicates an expected call of ExitValidator.
func (mr *MockControllerMockRecorder) ExitValidator(pubKey, blockNumber, validatorIndex, ownValidator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitValidator", reflect.TypeOf((*MockController)(nil).ExitValidator), pubKey, blockNumber, validatorIndex, ownValidator)
}

// FilterIndices mocks base method.
func (m *MockController) FilterIndices(afterInit bool, filter func(*types0.SSVShare) bool) []phase0.ValidatorIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterIndices", afterInit, filter)
	ret0, _ := ret[0].([]phase0.ValidatorIndex)
	return ret0
}

// FilterIndices indicates an expected call of FilterIndices.
func (mr *MockControllerMockRecorder) FilterIndices(afterInit, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterIndices", reflect.TypeOf((*MockController)(nil).FilterIndices), afterInit, filter)
}

// GetValidator mocks base method.
func (m *MockController) GetValidator(pubKey types.ValidatorPK) (*validator.Validator, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", pubKey)
	ret0, _ := ret[0].(*validator.Validator)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockControllerMockRecorder) GetValidator(pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockController)(nil).GetValidator), pubKey)
}

// GetValidatorStats mocks base method.
func (m *MockController) GetValidatorStats() (uint64, uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStats")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetValidatorStats indicates an expected call of GetValidatorStats.
func (mr *MockControllerMockRecorder) GetValidatorStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStats", reflect.TypeOf((*MockController)(nil).GetValidatorStats))
}

// HandleMetadataUpdates mocks base method.
func (m *MockController) HandleMetadataUpdates(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMetadataUpdates", ctx)
}

// HandleMetadataUpdates indicates an expected call of HandleMetadataUpdates.
func (mr *MockControllerMockRecorder) HandleMetadataUpdates(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMetadataUpdates", reflect.TypeOf((*MockController)(nil).HandleMetadataUpdates), ctx)
}

// IndicesChangeChan mocks base method.
func (m *MockController) IndicesChangeChan() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndicesChangeChan")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// IndicesChangeChan indicates an expected call of IndicesChangeChan.
func (mr *MockControllerMockRecorder) IndicesChangeChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndicesChangeChan", reflect.TypeOf((*MockController)(nil).IndicesChangeChan))
}

// LiquidateCluster mocks base method.
func (m *MockController) LiquidateCluster(owner common.Address, operatorIDs []uint64, toLiquidate []*types0.SSVShare) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiquidateCluster", owner, operatorIDs, toLiquidate)
	ret0, _ := ret[0].(error)
	return ret0
}

// LiquidateCluster indicates an expected call of LiquidateCluster.
func (mr *MockControllerMockRecorder) LiquidateCluster(owner, operatorIDs, toLiquidate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiquidateCluster", reflect.TypeOf((*MockController)(nil).LiquidateCluster), owner, operatorIDs, toLiquidate)
}

// ReactivateCluster mocks base method.
func (m *MockController) ReactivateCluster(owner common.Address, operatorIDs []uint64, toReactivate []*types0.SSVShare) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactivateCluster", owner, operatorIDs, toReactivate)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReactivateCluster indicates an expected call of ReactivateCluster.
func (mr *MockControllerMockRecorder) ReactivateCluster(owner, operatorIDs, toReactivate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactivateCluster", reflect.TypeOf((*MockController)(nil).ReactivateCluster), owner, operatorIDs, toReactivate)
}

// ReportValidatorStatuses mocks base method.
func (m *MockController) ReportValidatorStatuses(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportValidatorStatuses", ctx)
}

// ReportValidatorStatuses indicates an expected call of ReportValidatorStatuses.
func (mr *MockControllerMockRecorder) ReportValidatorStatuses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportValidatorStatuses", reflect.TypeOf((*MockController)(nil).ReportValidatorStatuses), ctx)
}

// StartNetworkHandlers mocks base method.
func (m *MockController) StartNetworkHandlers() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartNetworkHandlers")
}

// StartNetworkHandlers indicates an expected call of StartNetworkHandlers.
func (mr *MockControllerMockRecorder) StartNetworkHandlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNetworkHandlers", reflect.TypeOf((*MockController)(nil).StartNetworkHandlers))
}

// StartValidators mocks base method.
func (m *MockController) StartValidators(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartValidators", ctx)
}

// StartValidators indicates an expected call of StartValidators.
func (mr *MockControllerMockRecorder) StartValidators(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartValidators", reflect.TypeOf((*MockController)(nil).StartValidators), ctx)
}

// StopValidator mocks base method.
func (m *MockController) StopValidator(pubKey types.ValidatorPK) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopValidator", pubKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopValidator indicates an expected call of StopValidator.
func (mr *MockControllerMockRecorder) StopValidator(pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopValidator", reflect.TypeOf((*MockController)(nil).StopValidator), pubKey)
}

// UpdateFeeRecipient mocks base method.
func (m *MockController) UpdateFeeRecipient(owner, recipient common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeeRecipient", owner, recipient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeeRecipient indicates an expected call of UpdateFeeRecipient.
func (mr *MockControllerMockRecorder) UpdateFeeRecipient(owner, recipient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeeRecipient", reflect.TypeOf((*MockController)(nil).UpdateFeeRecipient), owner, recipient)
}

// ValidatorExitChan mocks base method.
func (m *MockController) ValidatorExitChan() <-chan duties.ExitDescriptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorExitChan")
	ret0, _ := ret[0].(<-chan duties.ExitDescriptor)
	return ret0
}

// ValidatorExitChan indicates an expected call of ValidatorExitChan.
func (mr *MockControllerMockRecorder) ValidatorExitChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorExitChan", reflect.TypeOf((*MockController)(nil).ValidatorExitChan))
}

// MockRecipients is a mock of Recipients interface.
type MockRecipients struct {
	ctrl     *gomock.Controller
	recorder *MockRecipientsMockRecorder
	isgomock struct{}
}

// MockRecipientsMockRecorder is the mock recorder for MockRecipients.
type MockRecipientsMockRecorder struct {
	mock *MockRecipients
}

// NewMockRecipients creates a new mock instance.
func NewMockRecipients(ctrl *gomock.Controller) *MockRecipients {
	mock := &MockRecipients{ctrl: ctrl}
	mock.recorder = &MockRecipientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipients) EXPECT() *MockRecipientsMockRecorder {
	return m.recorder
}

// GetRecipientData mocks base method.
func (m *MockRecipients) GetRecipientData(r basedb.Reader, owner common.Address) (*storage.RecipientData, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientData", r, owner)
	ret0, _ := ret[0].(*storage.RecipientData)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecipientData indicates an expected call of GetRecipientData.
func (mr *MockRecipientsMockRecorder) GetRecipientData(r, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientData", reflect.TypeOf((*MockRecipients)(nil).GetRecipientData), r, owner)
}

// MockSharesStorage is a mock of SharesStorage interface.
type MockSharesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSharesStorageMockRecorder
	isgomock struct{}
}

// MockSharesStorageMockRecorder is the mock recorder for MockSharesStorage.
type MockSharesStorageMockRecorder struct {
	mock *MockSharesStorage
}

// NewMockSharesStorage creates a new mock instance.
func NewMockSharesStorage(ctrl *gomock.Controller) *MockSharesStorage {
	mock := &MockSharesStorage{ctrl: ctrl}
	mock.recorder = &MockSharesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharesStorage) EXPECT() *MockSharesStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSharesStorage) Get(txn basedb.Reader, pubKey []byte) (*types0.SSVShare, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", txn, pubKey)
	ret0, _ := ret[0].(*types0.SSVShare)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSharesStorageMockRecorder) Get(txn, pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSharesStorage)(nil).Get), txn, pubKey)
}

// List mocks base method.
func (m *MockSharesStorage) List(txn basedb.Reader, filters ...storage.SharesFilter) []*types0.SSVShare {
	m.ctrl.T.Helper()
	varargs := []any{txn}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockSharesStorageMockRecorder) List(txn any, filters ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{txn}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSharesStorage)(nil).List), varargs...)
}

// Range mocks base method.
func (m *MockSharesStorage) Range(txn basedb.Reader, fn func(*types0.SSVShare) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", txn, fn)
}

// Range indicates an expected call of Range.
func (mr *MockSharesStorageMockRecorder) Range(txn, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockSharesStorage)(nil).Range), txn, fn)
}

// MockP2PNetwork is a mock of P2PNetwork interface.
type MockP2PNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockP2PNetworkMockRecorder
	isgomock struct{}
}

// MockP2PNetworkMockRecorder is the mock recorder for MockP2PNetwork.
type MockP2PNetworkMockRecorder struct {
	mock *MockP2PNetwork
}

// NewMockP2PNetwork creates a new mock instance.
func NewMockP2PNetwork(ctrl *gomock.Controller) *MockP2PNetwork {
	mock := &MockP2PNetwork{ctrl: ctrl}
	mock.recorder = &MockP2PNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PNetwork) EXPECT() *MockP2PNetworkMockRecorder {
	return m.recorder
}

// ActiveSubnets mocks base method.
func (m *MockP2PNetwork) ActiveSubnets() commons.Subnets {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveSubnets")
	ret0, _ := ret[0].(commons.Subnets)
	return ret0
}

// ActiveSubnets indicates an expected call of ActiveSubnets.
func (mr *MockP2PNetworkMockRecorder) ActiveSubnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveSubnets", reflect.TypeOf((*MockP2PNetwork)(nil).ActiveSubnets))
}

// Broadcast mocks base method.
func (m *MockP2PNetwork) Broadcast(id types.MessageID, message *types.SignedSSVMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", id, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockP2PNetworkMockRecorder) Broadcast(id, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockP2PNetwork)(nil).Broadcast), id, message)
}

// FixedSubnets mocks base method.
func (m *MockP2PNetwork) FixedSubnets() commons.Subnets {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FixedSubnets")
	ret0, _ := ret[0].(commons.Subnets)
	return ret0
}

// FixedSubnets indicates an expected call of FixedSubnets.
func (mr *MockP2PNetworkMockRecorder) FixedSubnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FixedSubnets", reflect.TypeOf((*MockP2PNetwork)(nil).FixedSubnets))
}

// SubscribeRandoms mocks base method.
func (m *MockP2PNetwork) SubscribeRandoms(logger *zap.Logger, numSubnets int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeRandoms", logger, numSubnets)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeRandoms indicates an expected call of SubscribeRandoms.
func (mr *MockP2PNetworkMockRecorder) SubscribeRandoms(logger, numSubnets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeRandoms", reflect.TypeOf((*MockP2PNetwork)(nil).SubscribeRandoms), logger, numSubnets)
}

// UseMessageRouter mocks base method.
func (m *MockP2PNetwork) UseMessageRouter(router network.MessageRouter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseMessageRouter", router)
}

// UseMessageRouter indicates an expected call of UseMessageRouter.
func (mr *MockP2PNetworkMockRecorder) UseMessageRouter(router any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseMessageRouter", reflect.TypeOf((*MockP2PNetwork)(nil).UseMessageRouter), router)
}
