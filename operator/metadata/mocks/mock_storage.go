// Code generated by MockGen. DO NOT EDIT.
// Source: ./updater.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"reflect"

	"github.com/ssvlabs/ssv-spec/types"
	"go.uber.org/mock/gomock"

	"github.com/ssvlabs/ssv/protocol/v2/blockchain/beacon"
	types0 "github.com/ssvlabs/ssv/protocol/v2/types"
	"github.com/ssvlabs/ssv/registry/storage"
	"github.com/ssvlabs/ssv/storage/basedb"
)

// MockSharesStorage is a mock of SharesStorage interface.
type MockSharesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSharesStorageMockRecorder
}

// MockSharesStorageMockRecorder is the mock recorder for MockSharesStorage.
type MockSharesStorageMockRecorder struct {
	mock *MockSharesStorage
}

// NewMockSharesStorage creates a new mock instance.
func NewMockSharesStorage(ctrl *gomock.Controller) *MockSharesStorage {
	mock := &MockSharesStorage{ctrl: ctrl}
	mock.recorder = &MockSharesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharesStorage) EXPECT() *MockSharesStorageMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockSharesStorage) List(txn basedb.Reader, filters ...storage.SharesFilter) []*types0.SSVShare {
	m.ctrl.T.Helper()
	varargs := []interface{}{txn}
	for _, a := range filters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*types0.SSVShare)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockSharesStorageMockRecorder) List(txn interface{}, filters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{txn}, filters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSharesStorage)(nil).List), varargs...)
}

// UpdateValidatorsMetadata mocks base method.
func (m *MockSharesStorage) UpdateValidatorsMetadata(arg0 map[types.ValidatorPK]*beacon.ValidatorMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValidatorsMetadata", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValidatorsMetadata indicates an expected call of UpdateValidatorsMetadata.
func (mr *MockSharesStorageMockRecorder) UpdateValidatorsMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidatorsMetadata", reflect.TypeOf((*MockSharesStorage)(nil).UpdateValidatorsMetadata), arg0)
}
