// Code generated by MockGen. DO NOT EDIT.
// Source: ./controller.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/controller.go -source=./controller.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/ssvlabs/ssv/protocol/v2/types"
	gomock "go.uber.org/mock/gomock"
)

// MockValidatorProvider is a mock of ValidatorProvider interface.
type MockValidatorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorProviderMockRecorder
	isgomock struct{}
}

// MockValidatorProviderMockRecorder is the mock recorder for MockValidatorProvider.
type MockValidatorProviderMockRecorder struct {
	mock *MockValidatorProvider
}

// NewMockValidatorProvider creates a new mock instance.
func NewMockValidatorProvider(ctrl *gomock.Controller) *MockValidatorProvider {
	mock := &MockValidatorProvider{ctrl: ctrl}
	mock.recorder = &MockValidatorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorProvider) EXPECT() *MockValidatorProviderMockRecorder {
	return m.recorder
}

// SelfValidators mocks base method.
func (m *MockValidatorProvider) SelfValidators() []*types.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfValidators")
	ret0, _ := ret[0].([]*types.SSVShare)
	return ret0
}

// SelfValidators indicates an expected call of SelfValidators.
func (mr *MockValidatorProviderMockRecorder) SelfValidators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfValidators", reflect.TypeOf((*MockValidatorProvider)(nil).SelfValidators))
}

// MockRecipientController is a mock of RecipientController interface.
type MockRecipientController struct {
	ctrl     *gomock.Controller
	recorder *MockRecipientControllerMockRecorder
	isgomock struct{}
}

// MockRecipientControllerMockRecorder is the mock recorder for MockRecipientController.
type MockRecipientControllerMockRecorder struct {
	mock *MockRecipientController
}

// NewMockRecipientController creates a new mock instance.
func NewMockRecipientController(ctrl *gomock.Controller) *MockRecipientController {
	mock := &MockRecipientController{ctrl: ctrl}
	mock.recorder = &MockRecipientControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipientController) EXPECT() *MockRecipientControllerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockRecipientController) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockRecipientControllerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRecipientController)(nil).Start), ctx)
}

// SubscribeToFeeRecipientChanges mocks base method.
func (m *MockRecipientController) SubscribeToFeeRecipientChanges(ch <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeToFeeRecipientChanges", ch)
}

// SubscribeToFeeRecipientChanges indicates an expected call of SubscribeToFeeRecipientChanges.
func (mr *MockRecipientControllerMockRecorder) SubscribeToFeeRecipientChanges(ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToFeeRecipientChanges", reflect.TypeOf((*MockRecipientController)(nil).SubscribeToFeeRecipientChanges), ch)
}
