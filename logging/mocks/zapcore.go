// Code generated by MockGen. DO NOT EDIT.
// Source: go.uber.org/zap/zapcore (interfaces: Encoder)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	buffer "go.uber.org/zap/buffer"
	zapcore "go.uber.org/zap/zapcore"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// AddArray mocks base method.
func (m *MockEncoder) AddArray(arg0 string, arg1 zapcore.ArrayMarshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArray", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArray indicates an expected call of AddArray.
func (mr *MockEncoderMockRecorder) AddArray(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArray", reflect.TypeOf((*MockEncoder)(nil).AddArray), arg0, arg1)
}

// AddBinary mocks base method.
func (m *MockEncoder) AddBinary(arg0 string, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBinary", arg0, arg1)
}

// AddBinary indicates an expected call of AddBinary.
func (mr *MockEncoderMockRecorder) AddBinary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBinary", reflect.TypeOf((*MockEncoder)(nil).AddBinary), arg0, arg1)
}

// AddBool mocks base method.
func (m *MockEncoder) AddBool(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBool", arg0, arg1)
}

// AddBool indicates an expected call of AddBool.
func (mr *MockEncoderMockRecorder) AddBool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBool", reflect.TypeOf((*MockEncoder)(nil).AddBool), arg0, arg1)
}

// AddByteString mocks base method.
func (m *MockEncoder) AddByteString(arg0 string, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddByteString", arg0, arg1)
}

// AddByteString indicates an expected call of AddByteString.
func (mr *MockEncoderMockRecorder) AddByteString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddByteString", reflect.TypeOf((*MockEncoder)(nil).AddByteString), arg0, arg1)
}

// AddComplex128 mocks base method.
func (m *MockEncoder) AddComplex128(arg0 string, arg1 complex128) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddComplex128", arg0, arg1)
}

// AddComplex128 indicates an expected call of AddComplex128.
func (mr *MockEncoderMockRecorder) AddComplex128(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComplex128", reflect.TypeOf((*MockEncoder)(nil).AddComplex128), arg0, arg1)
}

// AddComplex64 mocks base method.
func (m *MockEncoder) AddComplex64(arg0 string, arg1 complex64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddComplex64", arg0, arg1)
}

// AddComplex64 indicates an expected call of AddComplex64.
func (mr *MockEncoderMockRecorder) AddComplex64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComplex64", reflect.TypeOf((*MockEncoder)(nil).AddComplex64), arg0, arg1)
}

// AddDuration mocks base method.
func (m *MockEncoder) AddDuration(arg0 string, arg1 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDuration", arg0, arg1)
}

// AddDuration indicates an expected call of AddDuration.
func (mr *MockEncoderMockRecorder) AddDuration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDuration", reflect.TypeOf((*MockEncoder)(nil).AddDuration), arg0, arg1)
}

// AddFloat32 mocks base method.
func (m *MockEncoder) AddFloat32(arg0 string, arg1 float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFloat32", arg0, arg1)
}

// AddFloat32 indicates an expected call of AddFloat32.
func (mr *MockEncoderMockRecorder) AddFloat32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFloat32", reflect.TypeOf((*MockEncoder)(nil).AddFloat32), arg0, arg1)
}

// AddFloat64 mocks base method.
func (m *MockEncoder) AddFloat64(arg0 string, arg1 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFloat64", arg0, arg1)
}

// AddFloat64 indicates an expected call of AddFloat64.
func (mr *MockEncoderMockRecorder) AddFloat64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFloat64", reflect.TypeOf((*MockEncoder)(nil).AddFloat64), arg0, arg1)
}

// AddInt mocks base method.
func (m *MockEncoder) AddInt(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt", arg0, arg1)
}

// AddInt indicates an expected call of AddInt.
func (mr *MockEncoderMockRecorder) AddInt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt", reflect.TypeOf((*MockEncoder)(nil).AddInt), arg0, arg1)
}

// AddInt16 mocks base method.
func (m *MockEncoder) AddInt16(arg0 string, arg1 int16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt16", arg0, arg1)
}

// AddInt16 indicates an expected call of AddInt16.
func (mr *MockEncoderMockRecorder) AddInt16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt16", reflect.TypeOf((*MockEncoder)(nil).AddInt16), arg0, arg1)
}

// AddInt32 mocks base method.
func (m *MockEncoder) AddInt32(arg0 string, arg1 int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt32", arg0, arg1)
}

// AddInt32 indicates an expected call of AddInt32.
func (mr *MockEncoderMockRecorder) AddInt32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt32", reflect.TypeOf((*MockEncoder)(nil).AddInt32), arg0, arg1)
}

// AddInt64 mocks base method.
func (m *MockEncoder) AddInt64(arg0 string, arg1 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt64", arg0, arg1)
}

// AddInt64 indicates an expected call of AddInt64.
func (mr *MockEncoderMockRecorder) AddInt64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt64", reflect.TypeOf((*MockEncoder)(nil).AddInt64), arg0, arg1)
}

// AddInt8 mocks base method.
func (m *MockEncoder) AddInt8(arg0 string, arg1 int8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInt8", arg0, arg1)
}

// AddInt8 indicates an expected call of AddInt8.
func (mr *MockEncoderMockRecorder) AddInt8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInt8", reflect.TypeOf((*MockEncoder)(nil).AddInt8), arg0, arg1)
}

// AddObject mocks base method.
func (m *MockEncoder) AddObject(arg0 string, arg1 zapcore.ObjectMarshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddObject indicates an expected call of AddObject.
func (mr *MockEncoderMockRecorder) AddObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObject", reflect.TypeOf((*MockEncoder)(nil).AddObject), arg0, arg1)
}

// AddReflected mocks base method.
func (m *MockEncoder) AddReflected(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReflected", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReflected indicates an expected call of AddReflected.
func (mr *MockEncoderMockRecorder) AddReflected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReflected", reflect.TypeOf((*MockEncoder)(nil).AddReflected), arg0, arg1)
}

// AddString mocks base method.
func (m *MockEncoder) AddString(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddString", arg0, arg1)
}

// AddString indicates an expected call of AddString.
func (mr *MockEncoderMockRecorder) AddString(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddString", reflect.TypeOf((*MockEncoder)(nil).AddString), arg0, arg1)
}

// AddTime mocks base method.
func (m *MockEncoder) AddTime(arg0 string, arg1 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTime", arg0, arg1)
}

// AddTime indicates an expected call of AddTime.
func (mr *MockEncoderMockRecorder) AddTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTime", reflect.TypeOf((*MockEncoder)(nil).AddTime), arg0, arg1)
}

// AddUint mocks base method.
func (m *MockEncoder) AddUint(arg0 string, arg1 uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint", arg0, arg1)
}

// AddUint indicates an expected call of AddUint.
func (mr *MockEncoderMockRecorder) AddUint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint", reflect.TypeOf((*MockEncoder)(nil).AddUint), arg0, arg1)
}

// AddUint16 mocks base method.
func (m *MockEncoder) AddUint16(arg0 string, arg1 uint16) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint16", arg0, arg1)
}

// AddUint16 indicates an expected call of AddUint16.
func (mr *MockEncoderMockRecorder) AddUint16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint16", reflect.TypeOf((*MockEncoder)(nil).AddUint16), arg0, arg1)
}

// AddUint32 mocks base method.
func (m *MockEncoder) AddUint32(arg0 string, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint32", arg0, arg1)
}

// AddUint32 indicates an expected call of AddUint32.
func (mr *MockEncoderMockRecorder) AddUint32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint32", reflect.TypeOf((*MockEncoder)(nil).AddUint32), arg0, arg1)
}

// AddUint64 mocks base method.
func (m *MockEncoder) AddUint64(arg0 string, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint64", arg0, arg1)
}

// AddUint64 indicates an expected call of AddUint64.
func (mr *MockEncoderMockRecorder) AddUint64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint64", reflect.TypeOf((*MockEncoder)(nil).AddUint64), arg0, arg1)
}

// AddUint8 mocks base method.
func (m *MockEncoder) AddUint8(arg0 string, arg1 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUint8", arg0, arg1)
}

// AddUint8 indicates an expected call of AddUint8.
func (mr *MockEncoderMockRecorder) AddUint8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUint8", reflect.TypeOf((*MockEncoder)(nil).AddUint8), arg0, arg1)
}

// AddUintptr mocks base method.
func (m *MockEncoder) AddUintptr(arg0 string, arg1 uintptr) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUintptr", arg0, arg1)
}

// AddUintptr indicates an expected call of AddUintptr.
func (mr *MockEncoderMockRecorder) AddUintptr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUintptr", reflect.TypeOf((*MockEncoder)(nil).AddUintptr), arg0, arg1)
}

// Clone mocks base method.
func (m *MockEncoder) Clone() zapcore.Encoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(zapcore.Encoder)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockEncoderMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockEncoder)(nil).Clone))
}

// EncodeEntry mocks base method.
func (m *MockEncoder) EncodeEntry(arg0 zapcore.Entry, arg1 []zapcore.Field) (*buffer.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*buffer.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeEntry indicates an expected call of EncodeEntry.
func (mr *MockEncoderMockRecorder) EncodeEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeEntry", reflect.TypeOf((*MockEncoder)(nil).EncodeEntry), arg0, arg1)
}

// OpenNamespace mocks base method.
func (m *MockEncoder) OpenNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OpenNamespace", arg0)
}

// OpenNamespace indicates an expected call of OpenNamespace.
func (mr *MockEncoderMockRecorder) OpenNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenNamespace", reflect.TypeOf((*MockEncoder)(nil).OpenNamespace), arg0)
}
