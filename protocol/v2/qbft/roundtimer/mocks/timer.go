// Code generated by MockGen. DO NOT EDIT.
// Source: ./timer.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/timer.go -source=./timer.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	qbft "github.com/ssvlabs/ssv-spec/qbft"
	gomock "go.uber.org/mock/gomock"
)

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
	isgomock struct{}
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// TimeoutForRound mocks base method.
func (m *MockTimer) TimeoutForRound(height qbft.Height, round qbft.Round) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TimeoutForRound", height, round)
}

// TimeoutForRound indicates an expected call of TimeoutForRound.
func (mr *MockTimerMockRecorder) TimeoutForRound(height, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeoutForRound", reflect.TypeOf((*MockTimer)(nil).TimeoutForRound), height, round)
}
