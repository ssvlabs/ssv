// Code generated by MockGen. DO NOT EDIT.
// Source: ./signature_verifier.go

// Package signatureverifier is a generated GoMock package.
package signatureverifier

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/ssvlabs/ssv-spec/types"
	storage "github.com/ssvlabs/ssv/registry/storage"
	basedb "github.com/ssvlabs/ssv/storage/basedb"
)

// MockSignatureVerifier is a mock of SignatureVerifier interface.
type MockSignatureVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureVerifierMockRecorder
}

// MockSignatureVerifierMockRecorder is the mock recorder for MockSignatureVerifier.
type MockSignatureVerifierMockRecorder struct {
	mock *MockSignatureVerifier
}

// NewMockSignatureVerifier creates a new mock instance.
func NewMockSignatureVerifier(ctrl *gomock.Controller) *MockSignatureVerifier {
	mock := &MockSignatureVerifier{ctrl: ctrl}
	mock.recorder = &MockSignatureVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureVerifier) EXPECT() *MockSignatureVerifierMockRecorder {
	return m.recorder
}

// VerifySignature mocks base method.
func (m *MockSignatureVerifier) VerifySignature(operatorID types.OperatorID, message *types.SSVMessage, signature []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySignature", operatorID, message, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySignature indicates an expected call of VerifySignature.
func (mr *MockSignatureVerifierMockRecorder) VerifySignature(operatorID, message, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySignature", reflect.TypeOf((*MockSignatureVerifier)(nil).VerifySignature), operatorID, message, signature)
}

// MockOperatorStore is a mock of OperatorStore interface.
type MockOperatorStore struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorStoreMockRecorder
}

// MockOperatorStoreMockRecorder is the mock recorder for MockOperatorStore.
type MockOperatorStoreMockRecorder struct {
	mock *MockOperatorStore
}

// NewMockOperatorStore creates a new mock instance.
func NewMockOperatorStore(ctrl *gomock.Controller) *MockOperatorStore {
	mock := &MockOperatorStore{ctrl: ctrl}
	mock.recorder = &MockOperatorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorStore) EXPECT() *MockOperatorStoreMockRecorder {
	return m.recorder
}

// GetOperatorData mocks base method.
func (m *MockOperatorStore) GetOperatorData(r basedb.Reader, id types.OperatorID) (*storage.OperatorData, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorData", r, id)
	ret0, _ := ret[0].(*storage.OperatorData)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperatorData indicates an expected call of GetOperatorData.
func (mr *MockOperatorStoreMockRecorder) GetOperatorData(r, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorData", reflect.TypeOf((*MockOperatorStore)(nil).GetOperatorData), r, id)
}
