// Code generated by MockGen. DO NOT EDIT.
// Source: ./doppelganger.go
//
// Generated by this command:
//
//	mockgen -package=doppelganger -destination=./mock.go -source=./doppelganger.go
//

// Package doppelganger is a generated GoMock package.
package doppelganger

import (
	context "context"
	reflect "reflect"

	v1 "github.com/attestantio/go-eth2-client/api/v1"
	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	types "github.com/ssvlabs/ssv/protocol/v2/types"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// CanSign mocks base method.
func (m *MockProvider) CanSign(validatorIndex phase0.ValidatorIndex) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSign", validatorIndex)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanSign indicates an expected call of CanSign.
func (mr *MockProviderMockRecorder) CanSign(validatorIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSign", reflect.TypeOf((*MockProvider)(nil).CanSign), validatorIndex)
}

// RemoveValidatorState mocks base method.
func (m *MockProvider) RemoveValidatorState(validatorIndex phase0.ValidatorIndex) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveValidatorState", validatorIndex)
}

// RemoveValidatorState indicates an expected call of RemoveValidatorState.
func (mr *MockProviderMockRecorder) RemoveValidatorState(validatorIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveValidatorState", reflect.TypeOf((*MockProvider)(nil).RemoveValidatorState), validatorIndex)
}

// ReportQuorum mocks base method.
func (m *MockProvider) ReportQuorum(validatorIndex phase0.ValidatorIndex) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportQuorum", validatorIndex)
}

// ReportQuorum indicates an expected call of ReportQuorum.
func (mr *MockProviderMockRecorder) ReportQuorum(validatorIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportQuorum", reflect.TypeOf((*MockProvider)(nil).ReportQuorum), validatorIndex)
}

// Start mocks base method.
func (m *MockProvider) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockProviderMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProvider)(nil).Start), ctx)
}

// MockValidatorProvider is a mock of ValidatorProvider interface.
type MockValidatorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorProviderMockRecorder
}

// MockValidatorProviderMockRecorder is the mock recorder for MockValidatorProvider.
type MockValidatorProviderMockRecorder struct {
	mock *MockValidatorProvider
}

// NewMockValidatorProvider creates a new mock instance.
func NewMockValidatorProvider(ctrl *gomock.Controller) *MockValidatorProvider {
	mock := &MockValidatorProvider{ctrl: ctrl}
	mock.recorder = &MockValidatorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorProvider) EXPECT() *MockValidatorProviderMockRecorder {
	return m.recorder
}

// SelfParticipatingValidators mocks base method.
func (m *MockValidatorProvider) SelfParticipatingValidators(epoch phase0.Epoch) []*types.SSVShare {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfParticipatingValidators", epoch)
	ret0, _ := ret[0].([]*types.SSVShare)
	return ret0
}

// SelfParticipatingValidators indicates an expected call of SelfParticipatingValidators.
func (mr *MockValidatorProviderMockRecorder) SelfParticipatingValidators(epoch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfParticipatingValidators", reflect.TypeOf((*MockValidatorProvider)(nil).SelfParticipatingValidators), epoch)
}

// MockBeaconNode is a mock of BeaconNode interface.
type MockBeaconNode struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconNodeMockRecorder
}

// MockBeaconNodeMockRecorder is the mock recorder for MockBeaconNode.
type MockBeaconNodeMockRecorder struct {
	mock *MockBeaconNode
}

// NewMockBeaconNode creates a new mock instance.
func NewMockBeaconNode(ctrl *gomock.Controller) *MockBeaconNode {
	mock := &MockBeaconNode{ctrl: ctrl}
	mock.recorder = &MockBeaconNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeaconNode) EXPECT() *MockBeaconNodeMockRecorder {
	return m.recorder
}

// ValidatorLiveness mocks base method.
func (m *MockBeaconNode) ValidatorLiveness(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) ([]*v1.ValidatorLiveness, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorLiveness", ctx, epoch, validatorIndices)
	ret0, _ := ret[0].([]*v1.ValidatorLiveness)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatorLiveness indicates an expected call of ValidatorLiveness.
func (mr *MockBeaconNodeMockRecorder) ValidatorLiveness(ctx, epoch, validatorIndices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorLiveness", reflect.TypeOf((*MockBeaconNode)(nil).ValidatorLiveness), ctx, epoch, validatorIndices)
}
