// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ssvlabs/ssv/eth/eventhandler (interfaces: TaskExecutor)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/task_executor.go github.com/ssvlabs/ssv/eth/eventhandler TaskExecutor
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ssvlabs/ssv-spec/types"
	types0 "github.com/ssvlabs/ssv/protocol/v2/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskExecutor is a mock of TaskExecutor interface.
type MockTaskExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockTaskExecutorMockRecorder
	isgomock struct{}
}

// MockTaskExecutorMockRecorder is the mock recorder for MockTaskExecutor.
type MockTaskExecutorMockRecorder struct {
	mock *MockTaskExecutor
}

// NewMockTaskExecutor creates a new mock instance.
func NewMockTaskExecutor(ctrl *gomock.Controller) *MockTaskExecutor {
	mock := &MockTaskExecutor{ctrl: ctrl}
	mock.recorder = &MockTaskExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskExecutor) EXPECT() *MockTaskExecutorMockRecorder {
	return m.recorder
}

// ExitValidator mocks base method.
func (m *MockTaskExecutor) ExitValidator(pubKey phase0.BLSPubKey, blockNumber uint64, validatorIndex phase0.ValidatorIndex, ownValidator bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitValidator", pubKey, blockNumber, validatorIndex, ownValidator)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExitValidator indicates an expected call of ExitValidator.
func (mr *MockTaskExecutorMockRecorder) ExitValidator(pubKey, blockNumber, validatorIndex, ownValidator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitValidator", reflect.TypeOf((*MockTaskExecutor)(nil).ExitValidator), pubKey, blockNumber, validatorIndex, ownValidator)
}

// LiquidateCluster mocks base method.
func (m *MockTaskExecutor) LiquidateCluster(owner common.Address, operatorIDs []uint64, toLiquidate []*types0.SSVShare) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiquidateCluster", owner, operatorIDs, toLiquidate)
	ret0, _ := ret[0].(error)
	return ret0
}

// LiquidateCluster indicates an expected call of LiquidateCluster.
func (mr *MockTaskExecutorMockRecorder) LiquidateCluster(owner, operatorIDs, toLiquidate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiquidateCluster", reflect.TypeOf((*MockTaskExecutor)(nil).LiquidateCluster), owner, operatorIDs, toLiquidate)
}

// ReactivateCluster mocks base method.
func (m *MockTaskExecutor) ReactivateCluster(owner common.Address, operatorIDs []uint64, toReactivate []*types0.SSVShare) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactivateCluster", owner, operatorIDs, toReactivate)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReactivateCluster indicates an expected call of ReactivateCluster.
func (mr *MockTaskExecutorMockRecorder) ReactivateCluster(owner, operatorIDs, toReactivate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactivateCluster", reflect.TypeOf((*MockTaskExecutor)(nil).ReactivateCluster), owner, operatorIDs, toReactivate)
}

// StopValidator mocks base method.
func (m *MockTaskExecutor) StopValidator(pubKey types.ValidatorPK) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopValidator", pubKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopValidator indicates an expected call of StopValidator.
func (mr *MockTaskExecutorMockRecorder) StopValidator(pubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopValidator", reflect.TypeOf((*MockTaskExecutor)(nil).StopValidator), pubKey)
}

// UpdateFeeRecipient mocks base method.
func (m *MockTaskExecutor) UpdateFeeRecipient(owner, recipient common.Address, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeeRecipient", owner, recipient, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFeeRecipient indicates an expected call of UpdateFeeRecipient.
func (mr *MockTaskExecutorMockRecorder) UpdateFeeRecipient(owner, recipient, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeeRecipient", reflect.TypeOf((*MockTaskExecutor)(nil).UpdateFeeRecipient), owner, recipient, blockNumber)
}
