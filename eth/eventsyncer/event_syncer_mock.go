// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_syncer.go
//
// Generated by this command:
//
//	mockgen -package=eventsyncer -destination=./event_syncer_mock.go -source=./event_syncer.go
//

// Package eventsyncer is a generated GoMock package.
package eventsyncer

import (
	context "context"
	big "math/big"
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	executionclient "github.com/ssvlabs/ssv/eth/executionclient"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutionClient is a mock of ExecutionClient interface.
type MockExecutionClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionClientMockRecorder
}

// MockExecutionClientMockRecorder is the mock recorder for MockExecutionClient.
type MockExecutionClientMockRecorder struct {
	mock *MockExecutionClient
}

// NewMockExecutionClient creates a new mock instance.
func NewMockExecutionClient(ctrl *gomock.Controller) *MockExecutionClient {
	mock := &MockExecutionClient{ctrl: ctrl}
	mock.recorder = &MockExecutionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionClient) EXPECT() *MockExecutionClientMockRecorder {
	return m.recorder
}

// FetchHistoricalLogs mocks base method.
func (m *MockExecutionClient) FetchHistoricalLogs(ctx context.Context, fromBlock uint64) (<-chan executionclient.BlockLogs, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHistoricalLogs", ctx, fromBlock)
	ret0, _ := ret[0].(<-chan executionclient.BlockLogs)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchHistoricalLogs indicates an expected call of FetchHistoricalLogs.
func (mr *MockExecutionClientMockRecorder) FetchHistoricalLogs(ctx, fromBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHistoricalLogs", reflect.TypeOf((*MockExecutionClient)(nil).FetchHistoricalLogs), ctx, fromBlock)
}

// HeaderByNumber mocks base method.
func (m *MockExecutionClient) HeaderByNumber(ctx context.Context, blockNumber *big.Int) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, blockNumber)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber.
func (mr *MockExecutionClientMockRecorder) HeaderByNumber(ctx, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockExecutionClient)(nil).HeaderByNumber), ctx, blockNumber)
}

// StreamLogs mocks base method.
func (m *MockExecutionClient) StreamLogs(ctx context.Context, fromBlock uint64) <-chan executionclient.BlockLogs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamLogs", ctx, fromBlock)
	ret0, _ := ret[0].(<-chan executionclient.BlockLogs)
	return ret0
}

// StreamLogs indicates an expected call of StreamLogs.
func (mr *MockExecutionClientMockRecorder) StreamLogs(ctx, fromBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamLogs", reflect.TypeOf((*MockExecutionClient)(nil).StreamLogs), ctx, fromBlock)
}

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// HandleBlockEventsStream mocks base method.
func (m *MockEventHandler) HandleBlockEventsStream(ctx context.Context, logs <-chan executionclient.BlockLogs, executeTasks bool) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBlockEventsStream", ctx, logs, executeTasks)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleBlockEventsStream indicates an expected call of HandleBlockEventsStream.
func (mr *MockEventHandlerMockRecorder) HandleBlockEventsStream(ctx, logs, executeTasks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockEventsStream", reflect.TypeOf((*MockEventHandler)(nil).HandleBlockEventsStream), ctx, logs, executeTasks)
}
