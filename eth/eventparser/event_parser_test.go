package eventparser_test

import (
	"encoding/hex"
	"encoding/json"
	"testing"

	ethcommon "github.com/ethereum/go-ethereum/common"
	ethtypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/status-im/keycard-go/hexutils"
	"github.com/stretchr/testify/require"

	"github.com/ssvlabs/ssv/eth/contract"
	"github.com/ssvlabs/ssv/eth/eventparser"
)

func TestEventParser(t *testing.T) {
	contractFilterer, err := contract.NewContractFilterer(ethcommon.Address{}, nil)
	require.NoError(t, err)

	parser := eventparser.New(contractFilterer)

	t.Run("OperatorAdded", func(t *testing.T) {
		const event = `{
			"address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
			"topics": [
			  "0xd839f31c14bd632f424e307b36abff63ca33684f77f28e35dc13718ef338f7f4",
			  "0x0000000000000000000000000000000000000000000000000000000000000001",
			  "0x0000000000000000000000009d4d2d2dd7f11953535691786690610512e26b6c"
			],
			"data": "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000deb9cd9e0000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e42555556424d5667324d5546585930303151554e4c61474e354d546c556145494b627939484d576c684e3142794f565572616c4a35615759355a6a4179524739736430393156325a4c4c7a645356556c684f45684562484276516c564552446b77525456515547644a5379397354584234527974586277707751324e3562544270576b395554304a7a4e44453562456833547a41346258466a61314a735a4567355745786d626d59325554687157465235596d3179597a64574e6d77794e56707263546c3455306f7762485231436e646d546e5654537a4e435a6e46744e6b51784f55593061545643626d56615357686a52564a54596c464c5744467862574e71596e5a464c326379516b6f34547a68615a5567726430527a54484a694e6e5a585156494b5933425957473175656c4533566c70365a6b6c485447564c5655314354546836535730726358493452475a34534568536556553151544533634655346379394d4e5570355258453152474a6a6332513264486c6e625170355545394259554e7a576c6456524549335547684c4f487055575539575969394d4d316c6e53545534626a4658656b35494d307335636d467265557070546d55785445394756565a7a51544644556e68745132597a436d6c525355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330744c53304b00000000000000000000000000000000000000000000000000000000",
			"blockNumber": "0x843735",
			"transactionHash": "0x4f4f9c1e37cf0800a201227e8fa3cad6f8f246ac1cca1cb90e2c3311538b300c"
		}`
		const expectedOperatorPublicKeyBase64 = "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMVg2MUFXY001QUNLaGN5MTlUaEIKby9HMWlhN1ByOVUralJ5aWY5ZjAyRG9sd091V2ZLLzdSVUlhOEhEbHBvQlVERDkwRTVQUGdJSy9sTXB4RytXbwpwQ2N5bTBpWk9UT0JzNDE5bEh3TzA4bXFja1JsZEg5WExmbmY2UThqWFR5Ym1yYzdWNmwyNVprcTl4U0owbHR1CndmTnVTSzNCZnFtNkQxOUY0aTVCbmVaSWhjRVJTYlFLWDFxbWNqYnZFL2cyQko4TzhaZUgrd0RzTHJiNnZXQVIKY3BYWG1uelE3Vlp6ZklHTGVLVU1CTTh6SW0rcXI4RGZ4SEhSeVU1QTE3cFU4cy9MNUp5RXE1RGJjc2Q2dHlnbQp5UE9BYUNzWldVREI3UGhLOHpUWU9WYi9MM1lnSTU4bjFXek5IM0s5cmFreUppTmUxTE9GVVZzQTFDUnhtQ2YzCmlRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K"
		const expectedOwner = "0x9d4D2d2dd7F11953535691786690610512E26b6C"

		var log ethtypes.Log
		require.NoError(t, json.Unmarshal([]byte(event), &log))

		parsedEvent, err := parser.ParseOperatorAdded(log)
		require.NoError(t, err)

		require.NotNil(t, parsedEvent)
		require.Equal(t, expectedOperatorPublicKeyBase64, string(parsedEvent.PublicKey))
		require.Equal(t, expectedOwner, parsedEvent.Owner.Hex())
		require.Equal(t, uint64(1), parsedEvent.OperatorId)
	})

	t.Run("OperatorRemoved", func(t *testing.T) {
		const event = `{
			"address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
			"blockHash": "0xe4391b7ceab4a624fb2dd56fbcb38c318ef2d9faeefd9c42425c57f703daed38",
			"blockNumber": "0x843735",
			"data": "0x",
			"logIndex": "0x1",
			"removed": false,
			"topics": [
				"0x0e0ba6c2b04de36d6d509ec5bd155c43a9fe862f8052096dd54f3902a74cca3e",
				"0x0000000000000000000000000000000000000000000000000000000000001234"
			],
			"transactionHash": "0x921a3f836fb873a40aa4f83097e52b69225334c49674dc262b2bb90d27e3a801"
		}`

		var log ethtypes.Log
		require.NoError(t, json.Unmarshal([]byte(event), &log))

		parsedEvent, err := parser.ParseOperatorRemoved(log)
		require.NoError(t, err)

		require.NotNil(t, parsedEvent)
		require.Equal(t, uint64(0x1234), parsedEvent.OperatorId)
	})

	t.Run("ValidatorAdded", func(t *testing.T) {
		const event = `{
			"address": "0x4b133c68a084b8a88f72edcd7944b69c8d545f03",
			"topics": [
			  "0x48a3ea0796746043948f6341d17ff8200937b99262a0b48c2663b951ed7114e5",
			  "0x00000000000000000000000077fc6e8b24a623725d935bc88057098d0bca6eb3"
			],
			"data": "0x000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017c4071580000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000532d024bb0158000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030b24454393691331ee6eba4ffa2dbb2600b9859f908c3e648b6c6de9e1dea3e9329866015d08355c8d451427762b913d1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000520823f86dfcae5771e9b847c07ed6dda49211274db079f3397b3b06ab7291cebd688f63cb5648ca535c4ec4f9e2b89a48515a035dc24f4738ada942b72d32f75a7e72ac8a8c39d73a6fd633d0f58cadc4618dc70c8160cab5573d541c88a6aebada0acbbeacd49f2931c8c0c548d1b0f69cd468c803ec3fe06bddf08186ae3b64e0b5f1762feb141a06e71c828cedd3c878a08a40fd84d3a0449308c458fd324e67eb6df89e28bf6c304a1e71dcb8c9823b85c2dcca82a980cffb994da194e70b487d02db1ff328b6a8d5f6b519ffc1b524753ce8ed56d4ec1a3cdddc3b24f427b22caa351a1fa0d9f523bd279756ec38080c4850691c1f520dee49a9f4267c0a7a53c7818d165681c9a615a391ee5e4cc9c0e51725c1a92f7e92a393afe4f8f3f35503f241288822a1d721f5c164ea7f85d2b43b638678593d670e79c17a0e1398ac6bbd3ef7ccbdf67e38f6d058ffc5319280868c9a44529b1a4ea7f73792680e67693c502ad9053935edc312c48a94a0d18c71c18af8eb46ae8979d30f176969063430c14ef18a51b3dca4f8775551f4e1fc6a651ee909fc4f7b872c041514a01b4d88b972be86960e3472419ef1577c92af61d572e4e07b32bb38a0e52a1c75f03e1cee80d053b97e3e238c022521c48c6c1dc0f0def8fa0472d7669095b0e9304e63af8b5a9928d9fcf4de166029d88891d10ae6abafe150cc6e9aa6464d76064b16a19b09dad4556dffa580d14cd6755fa2274022abbc917eb7a50f296a153781742c2f101cf280b7f095bf443d51be4dcdd114804fb40ba496c16a3c3a3e82d8645833e51c22cebb78ce4b18b6b9eb3b480f5478b3ed97b5a93b705f41d05ed8423f424c5d05317c4e6e53e954570a46027361f7f3f18a581860720dac25afc00f4378a35439fd860ccbc0f0586ae6cf44d53f828faf77c1949bfe58c428de7263d48b1f7ecbb24a25c6abc11aa6105fe41a9a1f608c6895d808e8ca805efd306ec8774201a63e7d9220e031c5e8abdde49f5d56590637a5234b4b35a20875d5e0a5b06c2834dae47dd50633c371ef1071ea3d79a8ce727c2e83d3fae85a596112404875e847c743ddde50bc13b5d661f558e4d02f29b972188418d2f875d0603abbe9ab5c1fc19ae80636d9aa3a6c80be21b2970b84aa4659244424f943b3a99c8ec73304bcc8fc51519f1655ad6f75954af3cb238e946ac50aa365fd6538a7190b6e64b320f822a0010e92e1e4f3d773d25c4e29b3d590e75b4ebfecd6c059df2060f44344dda27f2f794aeb3dfcde62c7b24b80ff95ff1246d05805a12028d9840316f6b8368b60d2a824cc14b02d25a46b689e4519dd9963b5786ff9fa0c695fbdff455499a8f6cc88261b498e90223c0abca38dfe188eef0ac4680f6ac172fdf6b4a343cb1f090a8ce427ef4c745a2408f9ffe67c5b8eb17e7cc2e5851db5f5c75c0658afea00dc1552caf7ef745d2e5e057ccd3b177de22d989fe97bcac17471d0e8ee330a6d9788c6927b1991e784ec61deef91afad21895718e3fa751a782cf66c5911e3f2148dffb01e7e09dcbce8053e060df505f1121202017b34010ddbf02e63b40b8e88a73ac75eb239c401f136b255aded2201de167c9b6ee140de2d307712c8db8e958c5bab3de27d6a40e0b1211ccb634ca9204ce1bda71064f3bee1546f97979c9ec07cd5b4cb5befd7cf8ac930ad74111f381c72d18d3cf1aefef073630cc7bfef722650023032d6493fea494b3b01c95790b08609c9c039a1849fbe47042a29e98ce92f87641647db7d610357c087de95218ea357284828925c21ff7685f01f1b0e5ebadef7d1e763c64ee06d29f4ded10075d39",
			"blockNumber": "0x89EBFF",
			"transactionHash": "0x921a3f836fb873a40aa4f83097e52b69225334c49674dc262b2bb90d27e3a801"
		}`
		const expectedValidatorPublicKey = "b24454393691331ee6eba4ffa2dbb2600b9859f908c3e648b6c6de9e1dea3e9329866015d08355c8d451427762b913d1"
		const expectedShares = "823f86dfcae5771e9b847c07ed6dda49211274db079f3397b3b06ab7291cebd688f63cb5648ca535c4ec4f9e2b89a48515a035dc24f4738ada942b72d32f75a7e72ac8a8c39d73a6fd633d0f58cadc4618dc70c8160cab5573d541c88a6aebada0acbbeacd49f2931c8c0c548d1b0f69cd468c803ec3fe06bddf08186ae3b64e0b5f1762feb141a06e71c828cedd3c878a08a40fd84d3a0449308c458fd324e67eb6df89e28bf6c304a1e71dcb8c9823b85c2dcca82a980cffb994da194e70b487d02db1ff328b6a8d5f6b519ffc1b524753ce8ed56d4ec1a3cdddc3b24f427b22caa351a1fa0d9f523bd279756ec38080c4850691c1f520dee49a9f4267c0a7a53c7818d165681c9a615a391ee5e4cc9c0e51725c1a92f7e92a393afe4f8f3f35503f241288822a1d721f5c164ea7f85d2b43b638678593d670e79c17a0e1398ac6bbd3ef7ccbdf67e38f6d058ffc5319280868c9a44529b1a4ea7f73792680e67693c502ad9053935edc312c48a94a0d18c71c18af8eb46ae8979d30f176969063430c14ef18a51b3dca4f8775551f4e1fc6a651ee909fc4f7b872c041514a01b4d88b972be86960e3472419ef1577c92af61d572e4e07b32bb38a0e52a1c75f03e1cee80d053b97e3e238c022521c48c6c1dc0f0def8fa0472d7669095b0e9304e63af8b5a9928d9fcf4de166029d88891d10ae6abafe150cc6e9aa6464d76064b16a19b09dad4556dffa580d14cd6755fa2274022abbc917eb7a50f296a153781742c2f101cf280b7f095bf443d51be4dcdd114804fb40ba496c16a3c3a3e82d8645833e51c22cebb78ce4b18b6b9eb3b480f5478b3ed97b5a93b705f41d05ed8423f424c5d05317c4e6e53e954570a46027361f7f3f18a581860720dac25afc00f4378a35439fd860ccbc0f0586ae6cf44d53f828faf77c1949bfe58c428de7263d48b1f7ecbb24a25c6abc11aa6105fe41a9a1f608c6895d808e8ca805efd306ec8774201a63e7d9220e031c5e8abdde49f5d56590637a5234b4b35a20875d5e0a5b06c2834dae47dd50633c371ef1071ea3d79a8ce727c2e83d3fae85a596112404875e847c743ddde50bc13b5d661f558e4d02f29b972188418d2f875d0603abbe9ab5c1fc19ae80636d9aa3a6c80be21b2970b84aa4659244424f943b3a99c8ec73304bcc8fc51519f1655ad6f75954af3cb238e946ac50aa365fd6538a7190b6e64b320f822a0010e92e1e4f3d773d25c4e29b3d590e75b4ebfecd6c059df2060f44344dda27f2f794aeb3dfcde62c7b24b80ff95ff1246d05805a12028d9840316f6b8368b60d2a824cc14b02d25a46b689e4519dd9963b5786ff9fa0c695fbdff455499a8f6cc88261b498e90223c0abca38dfe188eef0ac4680f6ac172fdf6b4a343cb1f090a8ce427ef4c745a2408f9ffe67c5b8eb17e7cc2e5851db5f5c75c0658afea00dc1552caf7ef745d2e5e057ccd3b177de22d989fe97bcac17471d0e8ee330a6d9788c6927b1991e784ec61deef91afad21895718e3fa751a782cf66c5911e3f2148dffb01e7e09dcbce8053e060df505f1121202017b34010ddbf02e63b40b8e88a73ac75eb239c401f136b255aded2201de167c9b6ee140de2d307712c8db8e958c5bab3de27d6a40e0b1211ccb634ca9204ce1bda71064f3bee1546f97979c9ec07cd5b4cb5befd7cf8ac930ad74111f381c72d18d3cf1aefef073630cc7bfef722650023032d6493fea494b3b01c95790b08609c9c039a1849fbe47042a29e98ce92f87641647db7d610357c087de95218ea357284828925c21ff7685f01f1b0e5ebadef7d1e763c64ee06d29f4ded10075d39"

		var log ethtypes.Log
		require.NoError(t, json.Unmarshal([]byte(event), &log))

		parsedEvent, err := parser.ParseValidatorAdded(log)
		require.NoError(t, err)

		require.NoError(t, err)
		require.NotNil(t, parsedEvent)
		require.Equal(t, expectedValidatorPublicKey, hex.EncodeToString(parsedEvent.PublicKey))
		require.Equal(t, ethcommon.BytesToAddress(log.Topics[1].Bytes()), parsedEvent.Owner)
		operators := []uint64{1, 2, 3, 4}
		for i, opID := range parsedEvent.OperatorIds {
			require.Equal(t, operators[i], opID)
		}

		require.Equal(t, expectedShares, ethcommon.Bytes2Hex(parsedEvent.Shares))

		// TODO: test extracted share public keys in tests for handling events
	})

	t.Run("ValidatorRemoved", func(t *testing.T) {
		const event = `{
			"address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
			"blockHash": "0xe4391b7ceab4a624fb2dd56fbcb38c318ef2d9faeefd9c42425c57f703daed38",
			"blockNumber": "0x843735",
			"data": "0x00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000022f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000218b56598000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000071c295f1e8e55ca280000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000430000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000003081a7eef1ebbe375d133db27857babe06450b37af54a7e7fb5ad0c303cc9f3f4e9dc39fdbf5c9a9d8106f2cb1de91f61400000000000000000000000000000000",
			"logIndex": "0x7a",
			"removed": false,
			"topics": [
				"0xccf4370403e5fbbde0cd3f13426479dcd8a5916b05db424b7a2c04978cf8ce6e",
				"0x00000000000000000000000077fc6e8b24a623725d935bc88057098d0bca6eb3"
			],
			"transactionHash": "0x921a3f836fb873a40aa4f83097e52b69225334c49674dc262b2bb90d27e3a801"
		}`

		var log ethtypes.Log
		require.NoError(t, json.Unmarshal([]byte(event), &log))

		parsedEvent, err := parser.ParseValidatorRemoved(log)
		require.NoError(t, err)

		require.NotNil(t, parsedEvent)
		require.Equal(t, ethcommon.BytesToAddress(log.Topics[1].Bytes()), parsedEvent.Owner)
		require.Equal(t, []uint64{65, 66, 67, 68}, parsedEvent.OperatorIds)
		require.Equal(t, "0xcc9F3f4E9Dc39fDBf5C9a9D8106F2CB1dE91f614", ethcommon.BytesToAddress(parsedEvent.PublicKey).String())
	})

	t.Run("ClusterLiquidated", func(t *testing.T) {
		const event = `{
			"address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
			"blockHash": "0xe4391b7ceab4a624fb2dd56fbcb38c318ef2d9faeefd9c42425c57f703daed38",
			"blockNumber": "0x843735",
			"data": "0x00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000f",
			"logIndex": "0x7a",
			"removed": false,
			"topics": [
				"0x1fce24c373e07f89214e9187598635036111dbb363e99f4ce498488cdc66e688",
				"0x00000000000000000000000077fc6e8b24a623725d935bc88057098d0bca6eb3"
			],
			"transactionHash": "0x921a3f836fb873a40aa4f83097e52b69225334c49674dc262b2bb90d27e3a801"
		}`

		var log ethtypes.Log
		require.NoError(t, json.Unmarshal([]byte(event), &log))

		parsedEvent, err := parser.ParseClusterLiquidated(log)
		require.NoError(t, err)

		require.NotNil(t, parsedEvent)
		require.Equal(t, ethcommon.BytesToAddress(log.Topics[1].Bytes()), parsedEvent.Owner)
		require.Equal(t, []uint64{1, 6, 10, 15}, parsedEvent.OperatorIds)
	})

	t.Run("ClusterReactivated", func(t *testing.T) {
		const event = `{
			"address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
			"blockHash": "0x5c941f258ffac2dfe93c488df0b9b5a73c2b194ed5984a2826f97556ed40c103",
			"blockNumber": "0x843735",
			"data": "0x00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018a4a1d800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005100000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000053",
			"logIndex": "0x34",
			"removed": false,
			"topics": [
				"0xc803f8c01343fcdaf32068f4c283951623ef2b3fa0c547551931356f456b6859",
				"0x00000000000000000000000077fc6e8b24a623725d935bc88057098d0bca6eb3"
			],
			"transactionHash": "0x921a3f836fb873a40aa4f83097e52b69225334c49674dc262b2bb90d27e3a801",
			"transactionIndex": "0x22"
		}`

		var log ethtypes.Log
		require.NoError(t, json.Unmarshal([]byte(event), &log))

		parsedEvent, err := parser.ParseClusterReactivated(log)
		require.NoError(t, err)

		require.NotNil(t, parsedEvent)
		require.Equal(t, ethcommon.BytesToAddress(log.Topics[1].Bytes()), parsedEvent.Owner)
		require.Equal(t, []uint64{80, 81, 82, 83}, parsedEvent.OperatorIds)
	})

	t.Run("FeeRecipientUpdated", func(t *testing.T) {
		const event = `{
			"address": "0x3A23a7F455E853058d900f5dc86f1Bb1589b54F9",
			"blockHash": "0x5c941f258ffac2dfe93c488df0b9b5a73c2b194ed5984a2826f97556ed40c103",
			"blockNumber": "0x843735",
			"data": "0x000000000000000000000000a7a7720499b7eb1f1408a8a319284bfd2db4a427",
			"logIndex": "0x4f",
			"removed": false,
			"topics": [
				"0x259235c230d57def1521657e7c7951d3b385e76193378bc87ef6b56bc2ec3548",
				"0x00000000000000000000000077fc6e8b24a623725d935bc88057098d0bca6eb3"
			],
			"transactionHash": "0x921a3f836fb873a40aa4f83097e52b69225334c49674dc262b2bb90d27e3a801",
			"transactionIndex": "0x22"
		}`

		var log ethtypes.Log
		require.NoError(t, json.Unmarshal([]byte(event), &log))

		parsedEvent, err := parser.ParseFeeRecipientAddressUpdated(log)
		require.NoError(t, err)

		require.NotNil(t, parsedEvent)
		require.Equal(t, ethcommon.BytesToAddress(log.Topics[1].Bytes()), parsedEvent.Owner)
		require.Equal(t, "0xa7a7720499b7eB1F1408A8A319284bFD2Db4a427", parsedEvent.RecipientAddress.String())
	})
}

func TestPackOperatorPublicKey(t *testing.T) {
	t.Run("predefined correct rsa pub key", func(t *testing.T) {
		rsaPub := "2d2d2d2d2d424547494e20525341205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b434151454132316a3439482b3049754b713735497a374e66370a70393958664c32766e5771784963724a5730584b67372f3936483774664d35455050545378506748492f7350774f434752796936543864574d4b6a36714a54320a6a2b314f4553444c3332547077776f4375707a7576663935714b7557494a353759315332526638742b6b38656f662b644e6d54624c572b566a4666516d59752b0a784f79713650442f512b556332316e482b58637a6b3833702f54487669344d58584946713941565a3373707874303152347877732b3755554f4e4e472b4875700a6b6956642b63364a41774e7a52513773357367316a334c5771716d78534d462f7a376c414457487a496a6933785138437a3836634f5330715931542f6a4265560a37657a6543782b4a4d2b4d326d655a414a70314f646d616262522b614d794f644c2b6a48744b3569744e5857313458512f5970534c56544c335a505a4f77774e0a63514944415141420a2d2d2d2d2d454e4420525341205055424c4943204b45592d2d2d2d2d0a"
		expectedPackedPK := "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001cb2d2d2d2d2d424547494e20525341205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b434151454132316a3439482b3049754b713735497a374e66370a70393958664c32766e5771784963724a5730584b67372f3936483774664d35455050545378506748492f7350774f434752796936543864574d4b6a36714a54320a6a2b314f4553444c3332547077776f4375707a7576663935714b7557494a353759315332526638742b6b38656f662b644e6d54624c572b566a4666516d59752b0a784f79713650442f512b556332316e482b58637a6b3833702f54487669344d58584946713941565a3373707874303152347877732b3755554f4e4e472b4875700a6b6956642b63364a41774e7a52513773357367316a334c5771716d78534d462f7a376c414457487a496a6933785138437a3836634f5330715931542f6a4265560a37657a6543782b4a4d2b4d326d655a414a70314f646d616262522b614d794f644c2b6a48744b3569744e5857313458512f5970534c56544c335a505a4f77774e0a63514944415141420a2d2d2d2d2d454e4420525341205055424c4943204b45592d2d2d2d2d0a000000000000000000000000000000000000000000"
		packedOperatorPubKey, err := eventparser.PackOperatorPublicKey(hexutils.HexToBytes(rsaPub))
		require.NoError(t, err)
		require.Equal(t, expectedPackedPK, hex.EncodeToString(packedOperatorPubKey))
	})
}
