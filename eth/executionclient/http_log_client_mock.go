// Code generated by MockGen. DO NOT EDIT.
// Source: ./http_log_client.go
//
// Generated by this command:
//
//	mockgen -package=executionclient -destination=./http_log_client_mock.go -source=./http_log_client.go
//

// Package executionclient is a generated GoMock package.
package executionclient

import (
	context "context"
	reflect "reflect"
	time "time"

	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPLogClientInterface is a mock of HTTPLogClientInterface interface.
type MockHTTPLogClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPLogClientInterfaceMockRecorder
	isgomock struct{}
}

// MockHTTPLogClientInterfaceMockRecorder is the mock recorder for MockHTTPLogClientInterface.
type MockHTTPLogClientInterfaceMockRecorder struct {
	mock *MockHTTPLogClientInterface
}

// NewMockHTTPLogClientInterface creates a new mock instance.
func NewMockHTTPLogClientInterface(ctrl *gomock.Controller) *MockHTTPLogClientInterface {
	mock := &MockHTTPLogClientInterface{ctrl: ctrl}
	mock.recorder = &MockHTTPLogClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPLogClientInterface) EXPECT() *MockHTTPLogClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockHTTPLogClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockHTTPLogClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockHTTPLogClientInterface)(nil).Close))
}

// Connect mocks base method.
func (m *MockHTTPLogClientInterface) Connect(ctx context.Context, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockHTTPLogClientInterfaceMockRecorder) Connect(ctx, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockHTTPLogClientInterface)(nil).Connect), ctx, timeout)
}

// FetchLogs mocks base method.
func (m *MockHTTPLogClientInterface) FetchLogs(ctx context.Context, contractAddr common.Address, blockNum uint64) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLogs", ctx, contractAddr, blockNum)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLogs indicates an expected call of FetchLogs.
func (mr *MockHTTPLogClientInterfaceMockRecorder) FetchLogs(ctx, contractAddr, blockNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLogs", reflect.TypeOf((*MockHTTPLogClientInterface)(nil).FetchLogs), ctx, contractAddr, blockNum)
}

// FetchLogsViaReceipts mocks base method.
func (m *MockHTTPLogClientInterface) FetchLogsViaReceipts(ctx context.Context, contractAddr common.Address, blockNum uint64) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLogsViaReceipts", ctx, contractAddr, blockNum)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLogsViaReceipts indicates an expected call of FetchLogsViaReceipts.
func (mr *MockHTTPLogClientInterfaceMockRecorder) FetchLogsViaReceipts(ctx, contractAddr, blockNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLogsViaReceipts", reflect.TypeOf((*MockHTTPLogClientInterface)(nil).FetchLogsViaReceipts), ctx, contractAddr, blockNum)
}
