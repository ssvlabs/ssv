// Code generated by MockGen. DO NOT EDIT.
// Source: ./execution_client.go
//
// Generated by this command:
//
//	mockgen -package=executionclient -destination=./mocks.go -source=./execution_client.go
//

// Package executionclient is a generated GoMock package.
package executionclient

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	types "github.com/ethereum/go-ethereum/core/types"
	contract "github.com/ssvlabs/ssv/eth/contract"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// BlockByNumber mocks base method.
func (m *MockProvider) BlockByNumber(ctx context.Context, number *big.Int) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, number)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockProviderMockRecorder) BlockByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockProvider)(nil).BlockByNumber), ctx, number)
}

// ChainID mocks base method.
func (m *MockProvider) ChainID(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainID indicates an expected call of ChainID.
func (mr *MockProviderMockRecorder) ChainID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockProvider)(nil).ChainID), ctx)
}

// Close mocks base method.
func (m *MockProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProvider)(nil).Close))
}

// FetchHistoricalLogs mocks base method.
func (m *MockProvider) FetchHistoricalLogs(ctx context.Context, fromBlock uint64) (<-chan BlockLogs, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHistoricalLogs", ctx, fromBlock)
	ret0, _ := ret[0].(<-chan BlockLogs)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchHistoricalLogs indicates an expected call of FetchHistoricalLogs.
func (mr *MockProviderMockRecorder) FetchHistoricalLogs(ctx, fromBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHistoricalLogs", reflect.TypeOf((*MockProvider)(nil).FetchHistoricalLogs), ctx, fromBlock)
}

// FilterLogs mocks base method.
func (m *MockProvider) FilterLogs(ctx context.Context, q ethereum.FilterQuery) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterLogs", ctx, q)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterLogs indicates an expected call of FilterLogs.
func (mr *MockProviderMockRecorder) FilterLogs(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLogs", reflect.TypeOf((*MockProvider)(nil).FilterLogs), ctx, q)
}

// Filterer mocks base method.
func (m *MockProvider) Filterer() (*contract.ContractFilterer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filterer")
	ret0, _ := ret[0].(*contract.ContractFilterer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filterer indicates an expected call of Filterer.
func (mr *MockProviderMockRecorder) Filterer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filterer", reflect.TypeOf((*MockProvider)(nil).Filterer))
}

// HeaderByNumber mocks base method.
func (m *MockProvider) HeaderByNumber(ctx context.Context, blockNumber *big.Int) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, blockNumber)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber.
func (mr *MockProviderMockRecorder) HeaderByNumber(ctx, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockProvider)(nil).HeaderByNumber), ctx, blockNumber)
}

// Healthy mocks base method.
func (m *MockProvider) Healthy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockProviderMockRecorder) Healthy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockProvider)(nil).Healthy), ctx)
}

// StreamLogs mocks base method.
func (m *MockProvider) StreamLogs(ctx context.Context, fromBlock uint64) <-chan BlockLogs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamLogs", ctx, fromBlock)
	ret0, _ := ret[0].(<-chan BlockLogs)
	return ret0
}

// StreamLogs indicates an expected call of StreamLogs.
func (mr *MockProviderMockRecorder) StreamLogs(ctx, fromBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamLogs", reflect.TypeOf((*MockProvider)(nil).StreamLogs), ctx, fromBlock)
}

// SubscribeFilterLogs mocks base method.
func (m *MockProvider) SubscribeFilterLogs(ctx context.Context, q ethereum.FilterQuery, ch chan<- types.Log) (ethereum.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFilterLogs", ctx, q, ch)
	ret0, _ := ret[0].(ethereum.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFilterLogs indicates an expected call of SubscribeFilterLogs.
func (mr *MockProviderMockRecorder) SubscribeFilterLogs(ctx, q, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFilterLogs", reflect.TypeOf((*MockProvider)(nil).SubscribeFilterLogs), ctx, q, ch)
}

// MockSingleClientProvider is a mock of SingleClientProvider interface.
type MockSingleClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSingleClientProviderMockRecorder
}

// MockSingleClientProviderMockRecorder is the mock recorder for MockSingleClientProvider.
type MockSingleClientProviderMockRecorder struct {
	mock *MockSingleClientProvider
}

// NewMockSingleClientProvider creates a new mock instance.
func NewMockSingleClientProvider(ctrl *gomock.Controller) *MockSingleClientProvider {
	mock := &MockSingleClientProvider{ctrl: ctrl}
	mock.recorder = &MockSingleClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleClientProvider) EXPECT() *MockSingleClientProviderMockRecorder {
	return m.recorder
}

// BlockByNumber mocks base method.
func (m *MockSingleClientProvider) BlockByNumber(ctx context.Context, number *big.Int) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", ctx, number)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockSingleClientProviderMockRecorder) BlockByNumber(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockSingleClientProvider)(nil).BlockByNumber), ctx, number)
}

// ChainID mocks base method.
func (m *MockSingleClientProvider) ChainID(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainID indicates an expected call of ChainID.
func (mr *MockSingleClientProviderMockRecorder) ChainID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockSingleClientProvider)(nil).ChainID), ctx)
}

// Close mocks base method.
func (m *MockSingleClientProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSingleClientProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSingleClientProvider)(nil).Close))
}

// FetchHistoricalLogs mocks base method.
func (m *MockSingleClientProvider) FetchHistoricalLogs(ctx context.Context, fromBlock uint64) (<-chan BlockLogs, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHistoricalLogs", ctx, fromBlock)
	ret0, _ := ret[0].(<-chan BlockLogs)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchHistoricalLogs indicates an expected call of FetchHistoricalLogs.
func (mr *MockSingleClientProviderMockRecorder) FetchHistoricalLogs(ctx, fromBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHistoricalLogs", reflect.TypeOf((*MockSingleClientProvider)(nil).FetchHistoricalLogs), ctx, fromBlock)
}

// FilterLogs mocks base method.
func (m *MockSingleClientProvider) FilterLogs(ctx context.Context, q ethereum.FilterQuery) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterLogs", ctx, q)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterLogs indicates an expected call of FilterLogs.
func (mr *MockSingleClientProviderMockRecorder) FilterLogs(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLogs", reflect.TypeOf((*MockSingleClientProvider)(nil).FilterLogs), ctx, q)
}

// Filterer mocks base method.
func (m *MockSingleClientProvider) Filterer() (*contract.ContractFilterer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filterer")
	ret0, _ := ret[0].(*contract.ContractFilterer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filterer indicates an expected call of Filterer.
func (mr *MockSingleClientProviderMockRecorder) Filterer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filterer", reflect.TypeOf((*MockSingleClientProvider)(nil).Filterer))
}

// HeaderByNumber mocks base method.
func (m *MockSingleClientProvider) HeaderByNumber(ctx context.Context, blockNumber *big.Int) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeaderByNumber", ctx, blockNumber)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeaderByNumber indicates an expected call of HeaderByNumber.
func (mr *MockSingleClientProviderMockRecorder) HeaderByNumber(ctx, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeaderByNumber", reflect.TypeOf((*MockSingleClientProvider)(nil).HeaderByNumber), ctx, blockNumber)
}

// Healthy mocks base method.
func (m *MockSingleClientProvider) Healthy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockSingleClientProviderMockRecorder) Healthy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockSingleClientProvider)(nil).Healthy), ctx)
}

// StreamLogs mocks base method.
func (m *MockSingleClientProvider) StreamLogs(ctx context.Context, fromBlock uint64) <-chan BlockLogs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamLogs", ctx, fromBlock)
	ret0, _ := ret[0].(<-chan BlockLogs)
	return ret0
}

// StreamLogs indicates an expected call of StreamLogs.
func (mr *MockSingleClientProviderMockRecorder) StreamLogs(ctx, fromBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamLogs", reflect.TypeOf((*MockSingleClientProvider)(nil).StreamLogs), ctx, fromBlock)
}

// SubscribeFilterLogs mocks base method.
func (m *MockSingleClientProvider) SubscribeFilterLogs(ctx context.Context, q ethereum.FilterQuery, ch chan<- types.Log) (ethereum.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFilterLogs", ctx, q, ch)
	ret0, _ := ret[0].(ethereum.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFilterLogs indicates an expected call of SubscribeFilterLogs.
func (mr *MockSingleClientProviderMockRecorder) SubscribeFilterLogs(ctx, q, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFilterLogs", reflect.TypeOf((*MockSingleClientProvider)(nil).SubscribeFilterLogs), ctx, q, ch)
}

// SyncProgress mocks base method.
func (m *MockSingleClientProvider) SyncProgress(ctx context.Context) (*ethereum.SyncProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncProgress", ctx)
	ret0, _ := ret[0].(*ethereum.SyncProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncProgress indicates an expected call of SyncProgress.
func (mr *MockSingleClientProviderMockRecorder) SyncProgress(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncProgress", reflect.TypeOf((*MockSingleClientProvider)(nil).SyncProgress), ctx)
}

// streamLogsToChan mocks base method.
func (m *MockSingleClientProvider) streamLogsToChan(ctx context.Context, logs chan<- BlockLogs, fromBlock uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "streamLogsToChan", ctx, logs, fromBlock)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// streamLogsToChan indicates an expected call of streamLogsToChan.
func (mr *MockSingleClientProviderMockRecorder) streamLogsToChan(ctx, logs, fromBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "streamLogsToChan", reflect.TypeOf((*MockSingleClientProvider)(nil).streamLogsToChan), ctx, logs, fromBlock)
}
