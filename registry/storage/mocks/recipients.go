// Code generated by MockGen. DO NOT EDIT.
// Source: ./recipients.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/recipients.go -source=./recipients.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	bellatrix "github.com/attestantio/go-eth2-client/spec/bellatrix"
	common "github.com/ethereum/go-ethereum/common"
	storage "github.com/ssvlabs/ssv/registry/storage"
	basedb "github.com/ssvlabs/ssv/storage/basedb"
	gomock "go.uber.org/mock/gomock"
)

// MockRecipients is a mock of Recipients interface.
type MockRecipients struct {
	ctrl     *gomock.Controller
	recorder *MockRecipientsMockRecorder
	isgomock struct{}
}

// MockRecipientsMockRecorder is the mock recorder for MockRecipients.
type MockRecipientsMockRecorder struct {
	mock *MockRecipients
}

// NewMockRecipients creates a new mock instance.
func NewMockRecipients(ctrl *gomock.Controller) *MockRecipients {
	mock := &MockRecipients{ctrl: ctrl}
	mock.recorder = &MockRecipientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipients) EXPECT() *MockRecipientsMockRecorder {
	return m.recorder
}

// BumpNonce mocks base method.
func (m *MockRecipients) BumpNonce(rw basedb.ReadWriter, owner common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BumpNonce", rw, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// BumpNonce indicates an expected call of BumpNonce.
func (mr *MockRecipientsMockRecorder) BumpNonce(rw, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BumpNonce", reflect.TypeOf((*MockRecipients)(nil).BumpNonce), rw, owner)
}

// DeleteRecipientData mocks base method.
func (m *MockRecipients) DeleteRecipientData(rw basedb.ReadWriter, owner common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipientData", rw, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipientData indicates an expected call of DeleteRecipientData.
func (mr *MockRecipientsMockRecorder) DeleteRecipientData(rw, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipientData", reflect.TypeOf((*MockRecipients)(nil).DeleteRecipientData), rw, owner)
}

// DropRecipients mocks base method.
func (m *MockRecipients) DropRecipients() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropRecipients")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropRecipients indicates an expected call of DropRecipients.
func (mr *MockRecipientsMockRecorder) DropRecipients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropRecipients", reflect.TypeOf((*MockRecipients)(nil).DropRecipients))
}

// GetFeeRecipient mocks base method.
func (m *MockRecipients) GetFeeRecipient(owner common.Address) (bellatrix.ExecutionAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeeRecipient", owner)
	ret0, _ := ret[0].(bellatrix.ExecutionAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeeRecipient indicates an expected call of GetFeeRecipient.
func (mr *MockRecipientsMockRecorder) GetFeeRecipient(owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeRecipient", reflect.TypeOf((*MockRecipients)(nil).GetFeeRecipient), owner)
}

// GetNextNonce mocks base method.
func (m *MockRecipients) GetNextNonce(r basedb.Reader, owner common.Address) (storage.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextNonce", r, owner)
	ret0, _ := ret[0].(storage.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextNonce indicates an expected call of GetNextNonce.
func (mr *MockRecipientsMockRecorder) GetNextNonce(r, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextNonce", reflect.TypeOf((*MockRecipients)(nil).GetNextNonce), r, owner)
}

// SaveRecipientData mocks base method.
func (m *MockRecipients) SaveRecipientData(rw basedb.ReadWriter, owner common.Address, feeRecipient bellatrix.ExecutionAddress) (*storage.RecipientData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecipientData", rw, owner, feeRecipient)
	ret0, _ := ret[0].(*storage.RecipientData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRecipientData indicates an expected call of SaveRecipientData.
func (mr *MockRecipientsMockRecorder) SaveRecipientData(rw, owner, feeRecipient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecipientData", reflect.TypeOf((*MockRecipients)(nil).SaveRecipientData), rw, owner, feeRecipient)
}
