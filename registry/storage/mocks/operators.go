// Code generated by MockGen. DO NOT EDIT.
// Source: ./operators.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./mocks/operators.go -source=./operators.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/ssvlabs/ssv-spec/types"
	storage "github.com/ssvlabs/ssv/registry/storage"
	basedb "github.com/ssvlabs/ssv/storage/basedb"
	gomock "go.uber.org/mock/gomock"
)

// MockOperators is a mock of Operators interface.
type MockOperators struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorsMockRecorder
	isgomock struct{}
}

// MockOperatorsMockRecorder is the mock recorder for MockOperators.
type MockOperatorsMockRecorder struct {
	mock *MockOperators
}

// NewMockOperators creates a new mock instance.
func NewMockOperators(ctrl *gomock.Controller) *MockOperators {
	mock := &MockOperators{ctrl: ctrl}
	mock.recorder = &MockOperatorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperators) EXPECT() *MockOperatorsMockRecorder {
	return m.recorder
}

// DeleteOperatorData mocks base method.
func (m *MockOperators) DeleteOperatorData(rw basedb.ReadWriter, id types.OperatorID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperatorData", rw, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperatorData indicates an expected call of DeleteOperatorData.
func (mr *MockOperatorsMockRecorder) DeleteOperatorData(rw, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperatorData", reflect.TypeOf((*MockOperators)(nil).DeleteOperatorData), rw, id)
}

// DropOperators mocks base method.
func (m *MockOperators) DropOperators() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropOperators")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropOperators indicates an expected call of DropOperators.
func (mr *MockOperatorsMockRecorder) DropOperators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropOperators", reflect.TypeOf((*MockOperators)(nil).DropOperators))
}

// GetOperatorData mocks base method.
func (m *MockOperators) GetOperatorData(r basedb.Reader, id types.OperatorID) (*storage.OperatorData, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorData", r, id)
	ret0, _ := ret[0].(*storage.OperatorData)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperatorData indicates an expected call of GetOperatorData.
func (mr *MockOperatorsMockRecorder) GetOperatorData(r, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorData", reflect.TypeOf((*MockOperators)(nil).GetOperatorData), r, id)
}

// GetOperatorDataByPubKey mocks base method.
func (m *MockOperators) GetOperatorDataByPubKey(r basedb.Reader, operatorPubKey []byte) (*storage.OperatorData, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorDataByPubKey", r, operatorPubKey)
	ret0, _ := ret[0].(*storage.OperatorData)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperatorDataByPubKey indicates an expected call of GetOperatorDataByPubKey.
func (mr *MockOperatorsMockRecorder) GetOperatorDataByPubKey(r, operatorPubKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorDataByPubKey", reflect.TypeOf((*MockOperators)(nil).GetOperatorDataByPubKey), r, operatorPubKey)
}

// GetOperatorsPrefix mocks base method.
func (m *MockOperators) GetOperatorsPrefix() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorsPrefix")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetOperatorsPrefix indicates an expected call of GetOperatorsPrefix.
func (mr *MockOperatorsMockRecorder) GetOperatorsPrefix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorsPrefix", reflect.TypeOf((*MockOperators)(nil).GetOperatorsPrefix))
}

// ListOperators mocks base method.
func (m *MockOperators) ListOperators(r basedb.Reader, from, to uint64) ([]storage.OperatorData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperators", r, from, to)
	ret0, _ := ret[0].([]storage.OperatorData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperators indicates an expected call of ListOperators.
func (mr *MockOperatorsMockRecorder) ListOperators(r, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperators", reflect.TypeOf((*MockOperators)(nil).ListOperators), r, from, to)
}

// OperatorsExist mocks base method.
func (m *MockOperators) OperatorsExist(r basedb.Reader, ids []types.OperatorID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperatorsExist", r, ids)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperatorsExist indicates an expected call of OperatorsExist.
func (mr *MockOperatorsMockRecorder) OperatorsExist(r, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperatorsExist", reflect.TypeOf((*MockOperators)(nil).OperatorsExist), r, ids)
}

// SaveOperatorData mocks base method.
func (m *MockOperators) SaveOperatorData(rw basedb.ReadWriter, operatorData *storage.OperatorData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOperatorData", rw, operatorData)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOperatorData indicates an expected call of SaveOperatorData.
func (mr *MockOperatorsMockRecorder) SaveOperatorData(rw, operatorData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOperatorData", reflect.TypeOf((*MockOperators)(nil).SaveOperatorData), rw, operatorData)
}
